<?xml version="1.0" encoding="UTF-8"?>
<project name="JMeterPlugins" default="default" basedir=".">
   <description>Contains specific for JMeterPlugins build steps, all other steps are managed by NetBeans.</description>

   <!-- We rely on NetBeans build instructions file -->
   <import file="nbproject/build-impl.xml"/>
   
    <!--

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. They are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported
    nbproject/build-impl.xml file.


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are:

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="JMeterPlugins-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on
    the compile target as the regular run target does. Again, for a list of available
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file.

    -->

   <target name="-post-clean">
      <mkdir dir="${build.dir}/agent"/>
      <mkdir dir="${build.dir}/agent/classes"/>
      <mkdir dir="${build.dir}/agent/generated-sources/ap-source-output"/>
   </target>

   <target name="-post-compile">
      <macrodef name="javacAgent">
         <attribute default="src/kg/apc/jmeter/perfmon/agent" name="srcdir"/>
         <attribute default="${build.dir}/agent/classes" name="destdir"/>
         <attribute default="${javac.classpath}" name="classpath"/>
         <attribute default="${javac.processorpath}" name="processorpath"/>
         <attribute default="${build.dir}/agent/generated-sources/ap-source-output" name="apgeneratedsrcdir"/>
         <attribute default="${includes}" name="includes"/>
         <attribute default="${excludes}" name="excludes"/>
         <attribute default="${javac.debug}" name="debug"/>
         <attribute default="${empty.dir}" name="sourcepath"/>
         <attribute default="${empty.dir}" name="gensrcdir"/>
         <element name="customize" optional="true"/>
         <sequential>
            <property location="${build.dir}/agent/empty" name="empty.dir"/>
            <mkdir dir="${empty.dir}"/>
            <mkdir dir="${java.io.tmpdir}"/>
            <javac debug="@{debug}" deprecation="${javac.deprecation}"
                        destdir="@{destdir}" encoding="${source.encoding}"
                        excludes="@{excludes}" fork="${javac.fork}"
                        includeantruntime="false" includes="@{includes}"
                        source="1.4" sourcepath="@{sourcepath}"
                        srcdir="@{srcdir}" target="1.4"
                        tempdir="${java.io.tmpdir}">
               <src>
                  <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                     <include name="*"/>
                  </dirset>
               </src>
               <classpath>
                  <path path="@{classpath}"/>
               </classpath>
               <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
               <compilerarg line="${javac.compilerargs}"/>
               <customize/>
            </javac>
         </sequential>
      </macrodef>

      <javacAgent/>

      <copy todir="${build.dir}/agent/classes">
         <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}" includes="**/*.class"/>
      </copy>

   </target>

   <!-- APC: before making main jar we make agent's jar -->
   <target name="-pre-jar">
      <jar compress="${jar.compress}" index="${jar.index}" jarfile="${dist.dir}/ServerAgent.jar">
         <fileset dir="${build.dir}/agent/classes"/>
      </jar>
   </target>

   <!-- APC: I see no problems in making package always. It is quick enough now. -->
   <target name="-post-jar">
      <!-- APC: I believe that it is much simplier to require Sigar
           to be placed in sigar subdirectory, not requiring editing of build.xml
           by each contributor... -->
      <property location="sigar" name="sigar.dir"/>

      <!-- APC: what is svn.dir for us? it is just current dir!
           and again build.xml should be rarely modified file... -->
      <property location="./" name="svn.dir"/>
      
      <!-- APC: we should provide one package, that includes all of the stuff
           to use most of our project -->
      <zip destfile="${dist.dir}/JMeterPlugins.zip">
         <!-- JmeterPlugins files -->
         <zipfileset dir="${svn.dir}" includes="LICENSE README"/>
         <zipfileset dir="${dist.dir}" includes="JMeterPlugins.jar"/>
         <!-- agent files -->
         <zipfileset dir="${dist.dir}" includes="ServerAgent.jar" prefix="serverAgent"/>
         <zipfileset dir="${svn.dir}/agent" includes="startAgent.*" prefix="serverAgent"/>
         <!-- sigar files -->
         <zipfileset dir="${sigar.dir}/sigar-bin/lib" includes="*.*" excludes="log4j.jar, junit.jar, .sigar_shellrc" prefix="serverAgent"/>
         <zipfileset dir="${sigar.dir}" includes="COPYING EXCEPTIONS" prefix="serverAgent"/>
         <zipfileset dir="${sigar.dir}" includes="LICENSES README" prefix="serverAgent"/>
      </zip>

      <!-- APC: fore easy debugging environment we copy files
           for agent start to dist dir -->
      <copy todir="${dist.dir}">
         <fileset dir="${svn.dir}/agent" includes="startAgent.*" />
         <fileset dir="${sigar.dir}/sigar-bin/lib" includes="*.*" excludes="log4j.jar, junit.jar, .sigar_shellrc"/>
      </copy>

      <!-- APC: fore easy debugging environment we copy JmeterPlugins.jar
           to jmeter/lib/ext, defined by property jmeter.lib.ext
           in project.properties files -->
      <copy todir="${jmeter.lib.ext}">
         <fileset file="${dist.jar}"/>
      </copy>
   </target>

</project>
